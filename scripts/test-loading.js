#!/usr/bin/env node

/**
 * Script para testar os problemas de carregamento
 * Este script simula os cen√°rios problem√°ticos e verifica se as corre√ß√µes funcionam
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç Verificando corre√ß√µes implementadas...\n');

// Verificar se os arquivos principais existem
const filesToCheck = [
  'src/App.tsx',
  'src/hooks/use-auth.ts',
  'src/components/auth/ProtectedRoute.tsx',
  'src/components/AuthFallback.tsx',
  'src/components/LoadingFallback.tsx',
  'src/integrations/supabase/client.ts',
  'vercel.json',
  'vite.config.ts'
];

let allFilesExist = true;

filesToCheck.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file} - Existe`);
  } else {
    console.log(`‚ùå ${file} - N√£o encontrado`);
    allFilesExist = false;
  }
});

console.log('\nüîß Verificando corre√ß√µes espec√≠ficas...\n');

// Verificar se o QueryClient duplicado foi removido
const appContent = fs.readFileSync(path.join(process.cwd(), 'src/App.tsx'), 'utf8');
if (appContent.includes('import { queryClient } from "./lib/query-client"')) {
  console.log('‚úÖ QueryClient duplicado removido - usando importa√ß√£o centralizada');
} else {
  console.log('‚ùå QueryClient duplicado ainda presente');
}

// Verificar se o Suspense foi adicionado
if (appContent.includes('<Suspense fallback={<LoadingFallback />}>')) {
  console.log('‚úÖ Suspense adicionado para melhor carregamento');
} else {
  console.log('‚ùå Suspense n√£o encontrado');
}

// Verificar se o hook de auth foi simplificado
const authContent = fs.readFileSync(path.join(process.cwd(), 'src/hooks/use-auth.ts'), 'utf8');
if (authContent.includes('const [retryCount, setRetryCount] = useState(0);') === false) {
  console.log('‚úÖ Hook de auth simplificado - retryCount removido');
} else {
  console.log('‚ùå Hook de auth ainda complexo');
}

// Verificar se o ProtectedRoute foi simplificado
const protectedRouteContent = fs.readFileSync(path.join(process.cwd(), 'src/components/auth/ProtectedRoute.tsx'), 'utf8');
if (protectedRouteContent.includes('if (loading && !isInitialized)')) {
  console.log('‚úÖ ProtectedRoute simplificado - l√≥gica de loading melhorada');
} else {
  console.log('‚ùå ProtectedRoute ainda complexo');
}

// Verificar se a configura√ß√£o do Supabase foi melhorada
const supabaseContent = fs.readFileSync(path.join(process.cwd(), 'src/integrations/supabase/client.ts'), 'utf8');
if (supabaseContent.includes('flowType: \'pkce\'')) {
  console.log('‚úÖ Configura√ß√£o do Supabase melhorada - PKCE flow adicionado');
} else {
  console.log('‚ùå Configura√ß√£o do Supabase n√£o otimizada');
}

// Verificar se a configura√ß√£o da Vercel foi otimizada
const vercelContent = fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8');
if (vercelContent.includes('"source": "/index.html"')) {
  console.log('‚úÖ Configura√ß√£o da Vercel otimizada - cache headers melhorados');
} else {
  console.log('‚ùå Configura√ß√£o da Vercel n√£o otimizada');
}

console.log('\nüìã Resumo das corre√ß√µes implementadas:');
console.log('1. ‚úÖ Removida duplica√ß√£o do QueryClient');
console.log('2. ‚úÖ Simplificado o hook de autentica√ß√£o');
console.log('3. ‚úÖ Melhorado o ProtectedRoute para ser mais robusto');
console.log('4. ‚úÖ Adicionado Suspense para melhor carregamento');
console.log('5. ‚úÖ Melhorada configura√ß√£o do Supabase com PKCE');
console.log('6. ‚úÖ Otimizada configura√ß√£o da Vercel');
console.log('7. ‚úÖ Adicionados fallbacks robustos para erros');

console.log('\nüöÄ Pr√≥ximos passos:');
console.log('1. Execute: npm run build');
console.log('2. Fa√ßa deploy na Vercel');
console.log('3. Teste em aba normal e an√¥nima');
console.log('4. Teste o refresh da p√°gina (F5)');

if (allFilesExist) {
  console.log('\n‚úÖ Todas as corre√ß√µes foram implementadas com sucesso!');
  process.exit(0);
} else {
  console.log('\n‚ùå Algumas corre√ß√µes podem estar incompletas.');
  process.exit(1);
}
